/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GraphPackage;

import java.io.PrintWriter;
import java.util.Scanner;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author GIGA
 */
public class GraphTest {
    
    public GraphTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of addVertex method, of class Graph.
     * @param lab
     */
    @Test
    public void testAddVertex() {
        System.out.println("addVertex");
        char lab = 'a';
        Graph instance = new Graph();
        instance.addVertex(lab);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of addEdge method, of class Graph.
     * @param start
     * @param end
     */
    @Test
    public void testAddEdge_int_int() {
        System.out.println("addEdge");
        int start = 0;
        int end = 0;
        Graph instance = new Graph();
        instance.addEdge(start, end);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of addEdge method, of class Graph.
     * @param start
     * @param end
     * @param weight
     */
    @Test
    public void testAddEdge_3args() {
        System.out.println("addEdge");
        int start = 0;
        int end = 0;
        int weight = 0;
        Graph instance = new Graph();
        instance.addEdge(start, end, weight);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of displayVertex method, of class Graph.

    /**
     * Test of isConnected method, of class Graph.
     */
    @Test
    public void testIsConnected() {
        System.out.println("isConnected");
        Graph instance = new Graph();
        boolean expResult = false;
        boolean result = instance.isConnected();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findPath method, of class Graph.
     */


    /**
     * Test of validGraph method, of class Graph.
     */
    @Test
    public void testValidGraph() {
        System.out.println("validGraph");
        Graph instance = new Graph();
        boolean expResult = false;
        boolean result = instance.validGraph();
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of addVertex method, of class Graph.
     */


    /**
     * Test of addEdge method, of class Graph.
     */
    @Test


    /**
     * Test of displayVertex method, of class Graph.
     */

    public void testDisplayVertex() {
        System.out.println("displayVertex");
        int v = 0;
        Scanner input = null;
        PrintWriter output = null;
        Graph instance = new Graph();
        instance.displayVertex(v, input, output);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of displayEdges method, of class Graph.
     */
    @Test
    public void testDisplayEdges() {
        System.out.println("displayEdges");
        Scanner input = null;
        PrintWriter output = null;
        int numOfVertices = 0;
        int numOfEdges = 0;
        Graph instance = new Graph();
        instance.displayEdges(input, output, numOfVertices, numOfEdges);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of displayGraph method, of class Graph.
     */
    @Test
    public void testDisplayGraph() {
        System.out.println("displayGraph");
        Scanner input = null;
        PrintWriter output = null;
        Graph instance = new Graph();
        instance.displayGraph(input, output);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of dfs method, of class Graph.
     */
    @Test
    public void testDfs() {
        System.out.println("dfs");
        Scanner input = null;
        PrintWriter output = null;
        Graph instance = new Graph();
        instance.dfs(input, output);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of bfs method, of class Graph.
     */
    @Test
    public void testBfs() {
        System.out.println("bfs");
        Scanner input = null;
        PrintWriter output = null;
        Graph instance = new Graph();
        instance.bfs(input, output);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of getAdjUnvisitedVertex method, of class Graph.
     */
    @Test
    public void testGetAdjUnvisitedVertex() {
        System.out.println("getAdjUnvisitedVertex");
        int v = 0;
        Graph instance = new Graph();
        int expResult = 0;
        int result = instance.getAdjUnvisitedVertex(v);
        assertEquals(expResult, result);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of findPath method, of class Graph.
     */
    @Test
    public void testFindPath() {
        System.out.println("findPath");
        int i = 0;
        int[][] prev = null;
        PrintWriter output = null;
        int source = 0;
        Graph instance = new Graph();
        instance.findPath(i, prev, output, source);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of DijkstraUsingUnorderedArray method, of class Graph.
     */
    @Test
    public void testDijkstraUsingUnorderedArray() {
        System.out.println("DijkstraUsingUnorderedArray");
        Graph graph = null;
        int source = 0;
        PrintWriter output = null;
        Graph instance = new Graph();
        instance.DijkstraUsingUnorderedArray(graph, source, output);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }

    /**
     * Test of DijkstraUsingHeap method, of class Graph.
     */
    @Test
    public void testDijkstraUsingHeap() {
        System.out.println("DijkstraUsingHeap");
        Graph graph = null;
        int source = 0;
        PrintWriter output = null;
        Graph instance = new Graph();
        instance.DijkstraUsingHeap(graph, source, output);
        // TODO review the generated test code and remove the default call to fail.
        fail("The test case is a prototype.");
    }
    
}
